---
- name: Install Docker
  hosts: proxies
  become: yes

  tasks:
    - name: Install aptitude using apt (this will take some time)
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Uninstall incompatible Docker-py Module
      become: no
      pip:
        name: docker-py
        state: absent

    - name: Install Docker Module for Python
      pip:
        name: docker

- name: Create directory to share assets between host and container
  hosts: proxies
  vars_files:
    - vars/playbook_internal_config.yml

  tasks:
    - name: Create directory
      file:
        path: "{{ shared_assets_dir_path_name }}"
        state: directory

- name: Download Secure Connect Bundles
  hosts: proxies
  vars_files:
    - vars/proxy_core_config_input.yml
    - vars/playbook_internal_config.yml

  tasks:
    - name: Download SCB for Origin
      include_tasks: tasks/download_astra_scb_for_cluster.yml
      vars:
        - astra_db_id: "{{ origin_astra_db_id }}"
        - astra_token: "{{ origin_astra_token }}"
        - scb_dir_name: "{{ origin_scb_dir_name }}"
        - scb_filename_prefix: "origin_scb_"
        - shared_assets_dir: "{{ shared_assets_dir_path_name }}"
      when:
        - origin_astra_token is defined
        - origin_astra_token | length > 0
        - origin_astra_db_id is defined
        - origin_astra_db_id | length > 0
    - name: Download SCB for Target
      include_tasks: tasks/download_astra_scb_for_cluster.yml
      vars:
        - astra_db_id: "{{ target_astra_db_id }}"
        - astra_token: "{{ target_astra_token }}"
        - scb_dir_name: "{{ target_scb_dir_name }}"
        - scb_filename_prefix: "target_scb_"
        - shared_assets_dir: "{{ shared_assets_dir_path_name }}"
      when:
        - target_astra_token is defined
        - target_astra_token | length > 0
        - target_astra_db_id is defined
        - target_astra_db_id | length > 0

- name: Make TLS-related files available to proxy
  hosts: proxies
  vars_files:
    - vars/proxy_custom_tls_config_input.yml
    - vars/playbook_internal_config.yml

  tasks:
    - name: Copy Origin TLS-related files to shared asset directory
      include_tasks: tasks/transfer_tls_files_for_cluster.yml
      vars:
        - src_tls_dir_path: "{{ origin_tls_user_dir_path_name }}"
        - dest_tls_dir_path: "{{ shared_assets_dir_path_name }}/{{ origin_tls_proxy_dir_name }}"
        - server_ca_filename: "{{ origin_tls_server_ca_filename | default('') }}"
        - client_cert_filename: "{{ origin_tls_client_cert_filename | default('') }}"
        - client_key_filename: "{{ origin_tls_client_key_filename | default('') }}"
      when:
        - origin_tls_user_dir_path_name is defined
        - origin_tls_user_dir_path_name | length > 0
    - name: Copy Target TLS-related files to shared asset directory
      include_tasks: tasks/transfer_tls_files_for_cluster.yml
      vars:
        - src_tls_dir_path: "{{ target_tls_user_dir_path_name }}"
        - dest_tls_dir_path: "{{ shared_assets_dir_path_name }}/{{ target_tls_proxy_dir_name }}"
        - server_ca_filename: "{{ target_tls_server_ca_filename | default('') }}"
        - client_cert_filename: "{{ target_tls_client_cert_filename | default('') }}"
        - client_key_filename: "{{ target_tls_client_key_filename | default('') }}"
      when:
        - target_tls_user_dir_path_name is defined
        - target_tls_user_dir_path_name | length > 0

- name: Create proxy configuration env file
  hosts: proxies
  vars_files:
    - vars/proxy_core_config_input.yml
    - vars/proxy_advanced_config_input.yml
    - vars/proxy_custom_tls_config_input.yml
    - vars/playbook_internal_config.yml

  tasks:
    - name: Create configuration fragment directory
      file:
        path: "{{ proxy_config_fragments_dir_path_name }}"
        state: directory
    - name: Generate env var file from template for immutable configuration
      template:
        src: "proxy_immutable_config.j2"
        dest: "{{ proxy_config_fragments_dir_path_name }}/proxy_immutable_config.env"
    - name: Generate env var file from template for mutable configuration
      template:
        src: "proxy_mutable_config.j2"
        dest: "{{ proxy_config_fragments_dir_path_name }}/proxy_mutable_config.env"
    - name: Merge the immutable and mutable configuration files into a single one
      assemble:
        src: "{{ proxy_config_fragments_dir_path_name }}"
        dest: /home/ubuntu/proxy_config.env

- name: Install Proxy
  hosts: proxies
  become: yes
  vars_files:
    - vars/proxy_container.yml
    - vars/proxy_advanced_config_input.yml
    - vars/playbook_internal_config.yml

  tasks:
    - name: Pull Cloudgate Proxy Docker image from DockerHub
      docker_image:
        name: "{{ cloudgate_proxy_image }}"
        source: pull

    - name: Create proxy container
      docker_container:
        name: "{{ cloudgate_proxy_container_name }}"
        image: "{{ cloudgate_proxy_image }}"
        env_file: /home/ubuntu/proxy_config.env
        mounts:
          - source: "{{ shared_assets_dir_path_name }}" 
            target: "{{ shared_assets_dir_path_name }}"
            type: bind
        network_mode: host
        restart_policy: unless-stopped
        restart: yes
        state: started 




